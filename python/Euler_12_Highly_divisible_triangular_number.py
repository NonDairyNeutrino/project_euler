"""
Project Euler 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

#input: Integer > 0
#output: List of divisors of input
def divs(input):
	a=[]
	#Here we test is the input is even because we only need to consider the integers before the half-way point
	if (input+1)%2==0:
	    for i in range(2,int((input+1)/2)):
	        #Here we test if the number i is a divisor of the input.  If so, put it in the list of divisors
	        if input%i==0:
	            a.append(i)
	else:
	    for i in range(2,int(input/2)+1):
	        if input%i==0:
	            a.append(i)

	a.append(input)
	a.insert(0,1)

	return a
#Test
# n = 0
# divisors = []
# num_of_divs = 100
# while len(divisors) <= num_of_divs:
# 	n += 1
# 	tri_num = sum(range(n))
# 	divisors = divs(tri_num)
# n-=1
# print(n, tri_num, len(divisors))

def overshoot(length, overstep):
	n = 0; p = 0
	while overstep // 2**p != 0:
		divisors = []
		while len(divisors) <= length:
			n += overstep // 2**p
			tri_num = sum(range(n))
			divisors = divs(tri_num)
		#print(n, tri_num, divisors)
		n -= overstep // 2**p
		p += 1

	return n, tri_num, len(divisors)

print(overshoot(5, 100))

#Overshoot method - Long version
# n = 0
# num_of_divs = 100
# divisors = []
# while len(divisors) <= num_of_divs:
# 	n += 10
# 	tri_num = sum(range(n))
# 	divisors = divs(tri_num)
# #print(n, tri_num, divisors)
#
# n -= 10
# divisors = []
# while len(divisors) <= num_of_divs:
# 	n += 5
# 	tri_num = sum(range(n))
# 	divisors = divs(tri_num)
# #print(n, tri_num, divisors)
#
# n -= 5
# divisors = []
# while len(divisors) <= num_of_divs:
# 	n += 2
# 	tri_num = sum(range(n))
# 	divisors = divs(tri_num)
# #print(n, tri_num, len(divisors))
#
# n -= 2
# divisors = []
# while len(divisors) <= num_of_divs:
# 	n += 1
# 	tri_num = sum(range(n))
# 	divisors = divs(tri_num)
# n-=1
# print(n, tri_num, len(divisors))
